# shellcheck disable=all
# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# TODO: pressing lalt + ralt toggles these keybinds
# TODO: hammerspoon port?

# macOS bindings:
# alt - ctrl - up : mission control
# alt - ctrl - down : show apps
# alt - ctrl - left : switch to prior space
# alt - ctrl - right : switch to next space
# alt - <number> : switch to desktop number 1-10
# alt - space : show spotlight

# change focus (using arrow keys)
lalt - left  : yabai -m window --focus west \
               || yabai -m display --focus west
lalt - down  : yabai -m window --focus stack.prev \
               || yabai -m window --focus stack.last \
               || yabai -m window --focus south \
               || yabai -m display --focus south
lalt - up    : yabai -m window --focus stack.next \
               || yabai -m window --focus stack.first \
               || yabai -m window --focus north \
               || yabai -m display --focus north
lalt - right : yabai -m window --focus east \
               || yabai -m display --focus east
# shift window in current workspace
lalt + shift - left : yabai -m window --warp west || $(yabai -m window --display west; yabai -m display --focus west)
lalt + shift - down : yabai -m window --warp south || $(yabai -m window --display south; yabai -m display --focus south)
lalt + shift - up : yabai -m window --warp north || $(yabai -m window --display north; yabai -m display --focus north)
lalt + shift - right : yabai -m window --warp east || $(yabai -m window --display east; yabai -m display --focus east)
# move focused window to next/prev workspace
lalt + shift - 1 : yabai -m window --space 1
lalt + shift - 2 : yabai -m window --space 2
lalt + shift - 3 : yabai -m window --space 3
lalt + shift - 4 : yabai -m window --space 4
lalt + shift - 5 : yabai -m window --space 5
lalt + shift - 6 : yabai -m window --space 6
lalt + shift - 7 : yabai -m window --space 7
lalt + shift - 8 : yabai -m window --space 8
lalt + shift - 9 : yabai -m window --space 9
lalt + shift - 0 : yabai -m window --space 10

# toggle window split type
lalt - t : yabai -m window --toggle split
# float / unfloat window and center on screen
lalt + shift - t : yabai -m window --toggle float --grid 4:4:1:1:2:2
# change layout of desktop
lalt - e : yabai -m space --layout bsp
lalt - l : yabai -m space --layout float
lalt - s : yabai -m space --layout stack
# close focused window
lalt - w : yabai -m window --close
# toggle window fullscreen
lalt - f : yabai -m window --toggle zoom-fullscreen
lalt + shift - f : yabai -m window --toggle native-fullscreen

# open terminal
lalt - return : osascript -e 'tell application "iTerm2" to set newSession to create window with default profile end tell' || open -na iTerm
